service: buses

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  profile: personal
  role: arn:aws:iam::343547439778:role/myplanner-lambda-role
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}

functions:
  dataSync:
    handler: src/compiled/dbStream.handler
    environment:
      EVENTBUS: ${self:provider.stage}-db-event-bus
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::ImportValue: ${self:provider.stage}-dynamodata-stream-arn
          batchSize: 10
          batchWindow: 10
          startingPosition: TRIM_HORIZON
          enabled: true
          maximumRetryAttempts: 10
          destinations:
            onFailure:
              arn:
                Fn::GetAtt:
                  - DynanoDbStreamDeadLetterQueue
                  - Arn
              type: sqs
    memorySize: 1024
    timeout: 900
    layers:
      - arn:aws:lambda:ap-south-1:343547439778:layer:commonLibs:1

resources:
  Resources:
    DynamoEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:provider.stage}-db-event-bus

    DynanoDbStreamDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "dynamo-db-stream-${self:provider.stage}"
        MessageRetentionPeriod: 1209600

    # treatment_plan event queue
    inviteEventQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "invite-event-${self:provider.stage}"
        VisibilityTimeout: 180
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - inviteEventDeadQueue
              - Arn
          maxReceiveCount: 3

    inviteEventDeadQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "invite-event-dead-${self:provider.stage}"
        MessageRetentionPeriod: 1209600

    inviteEventPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Statement:
            - Action: "SQS:SendMessage"
              Effect: "Allow"
              Resource: !GetAtt inviteEventQueue.Arn
              Principal:
                Service: events.amazonaws.com
              Condition:
                ArnEquals:
                  "aws:SourceArn": !GetAtt inviteEventRule.Arn
        Queues:
          - !Ref inviteEventQueue

    inviteEventRule:
      Type: AWS::Events::Rule
      Properties:
        Name: inviteEventRule
        Description: rule to project data change
        EventBusName: !GetAtt DynamoEventBus.Name
        Targets:
          - Arn: !GetAtt inviteEventQueue.Arn
            Id: inviteEventQueueId
        EventPattern:
          source:
            - "dynamo-stream"
          detail:
            item_type:
              - project-invite
            eventName:
              - INSERT
              - MODIFY
  
  Outputs:
    DBEventBusName:
      Value: !Ref DynamoEventBus
      Export:
        Name: ${self:provider.stage}-db-event-bus-name
    inviteEventQueueArn:
      Value: !GetAtt inviteEventQueue.Arn
      Export:
        Name: ${self:provider.stage}-inviteEventQueueArn